%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Sun Mar  3 17:33:27 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUGUUAAACGCCCGGAGGCGCUUCCCGCGAUCCGGGCUUUUUAAUGGCAAGGU\
) } def
/len { sequence length } bind def

/coor [
[96.45301056 240.89692688]
[91.55238342 226.47805786]
[92.94659424 211.31309509]
[100.39407349 198.02946472]
[112.60449982 188.92863464]
[109.26668549 174.30471802]
[105.92887115 159.68078613]
[102.59106445 145.05686951]
[99.25325012 130.43295288]
[95.91543579 115.80903625]
[84.18936920 104.07839203]
[88.77796173 88.13934326]
[84.62542725 73.72558594]
[80.47290039 59.31182480]
[76.32036591 44.89806366]
[72.16783142 30.48430443]
[68.01529694 16.07054520]
[63.86276627 1.65678501]
[52.75901794 -5.46356392]
[49.76902771 -17.89268112]
[56.01007462 -28.58072853]
[52.67226028 -43.20464706]
[49.33444595 -57.82856750]
[36.57006836 -67.54711151]
[36.35393906 -83.58871460]
[48.85186005 -93.64762115]
[64.47649384 -90.00749969]
[71.24195099 -75.46074677]
[63.95836639 -61.16638184]
[67.29618073 -46.54246140]
[70.63399506 -31.91854286]
[83.24951172 -20.00425720]
[78.27652740 -2.49574757]
[82.42906189 11.91801262]
[86.58158875 26.33177185]
[90.73412323 40.74553299]
[94.88665771 55.15929031]
[99.03919220 69.57305145]
[103.19171906 83.98680878]
[113.22894287 90.42897797]
[116.20796204 101.97769165]
[110.53935242 112.47122192]
[113.87716675 127.09513855]
[117.21498108 141.71905518]
[120.55279541 156.34297180]
[123.89060974 170.96690369]
[127.22842407 185.59082031]
[142.17834473 188.49247742]
[154.65184021 197.22927856]
[162.48780823 210.28752136]
[164.32861328 225.40476990]
[159.85533142 239.96188354]
[149.84297180 251.43675232]
[136.02624512 257.84127808]
[120.79898071 258.06585693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[12 39]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[21 31]
[22 30]
[23 29]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
