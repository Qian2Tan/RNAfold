%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Tue Feb 27 22:55:16 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGAAUGCCCAGCCUUUAAAAAAACAGCUGGGCAUUCGGUUGCUUAUUAAUCG\
) } def
/len { sequence length } bind def

/coor [
[72.30435944 77.29982758]
[62.95201111 65.57235718]
[53.59966660 53.84488678]
[44.24731827 42.11741257]
[34.89496994 30.38994217]
[25.54262352 18.66246986]
[16.19027710 6.93499708]
[6.83792973 -4.79247522]
[-2.51441741 -16.51994705]
[-11.86676407 -28.24741936]
[-21.21911049 -39.97489166]
[-30.57145882 -51.70236588]
[-39.92380524 -63.42983627]
[-49.27615356 -75.15731049]
[-58.62849808 -86.88478088]
[-73.35690308 -83.01255798]
[-88.38589478 -85.47209930]
[-101.11161041 -93.83726501]
[-109.32924652 -106.65874481]
[-111.61504364 -121.71513367]
[-107.57298279 -136.39782715]
[-97.90336609 -148.16296387]
[-84.28150940 -154.97215271]
[-69.06749725 -155.64567566]
[-54.89723587 -150.06681824]
[-44.22581482 -139.20216370]
[-38.90211868 -124.93408966]
[-39.84851456 -109.73460388]
[-46.90102768 -96.23712921]
[-37.54867935 -84.50965881]
[-28.19633293 -72.78218079]
[-18.84398651 -61.05471039]
[-9.49163914 -49.32723999]
[-0.13929214 -37.59976578]
[9.21305466 -25.87229347]
[18.56540108 -14.14482212]
[27.91774940 -2.41734982]
[37.27009583 9.31012249]
[46.62244415 21.03759384]
[55.97478867 32.76506805]
[65.32714081 44.49253845]
[74.67948151 56.22001266]
[84.03182983 67.94748688]
[98.44129944 64.22407532]
[113.12000275 66.68016052]
[125.53251648 74.89149475]
[133.53485107 87.43976593]
[135.74481201 102.15753174]
[131.78063965 116.50263214]
[122.32708740 127.99727631]
[109.01702118 134.65602112]
[94.14947510 135.32870483]
[80.29246521 129.89915466]
[69.83950043 119.30519104]
[64.59608459 105.37669373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
